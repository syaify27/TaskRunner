 let stokData = []; // Array for stock data
        let produksiData = []; // Array for production data
        let benihData = []; // Array for seeds data
        let distribusiData = []; // Array for distribution data

        // Function to fetch and parse CSV data
        async function fetchSpreadsheetData() {
            try {
                const response = await fetch(SHEET_URL);
                if (!response.ok) throw new Error('Network response was not ok');
                const csvText = await response.text();
                const rows = csvText.split('\n').map(row => row.split(','));
                
                // Reset arrays before parsing new data
                stokData = [];
                produksiData = [];
                benihData = [];
                distribusiData = [];
                
                // Parse Stok Bibit (rows 1-4 in JS array, corresponding to spreadsheet rows 2-5)
                for (let i = 1; i <= 4; i++) {
                    if (rows[i] && rows[i][0] && rows[i][1]) {
                        stokData.push({ jenis: rows[i][0].trim(), stok: parseInt(rows[i][1].trim()) || 0 });
                    }
                }
                
                // Parse Produksi Harian (rows 5-8 in JS array, spreadsheet rows 6-9)
                for (let i = 5; i <= 8; i++) {
                    if (rows[i] && rows[i][0] && rows[i][1]) {
                        produksiData.push({ tanggal: rows[i][0].trim(), jumlah: parseFloat(rows[i][1].trim()) || 0 });
                    }
                }
                
                // Parse Benih Tersedia (rows 9-12 in JS array, spreadsheet rows 10-13)
                for (let i = 9; i <= 12; i++) {
                    if (rows[i] && rows[i][0] && rows[i][1]) {
                        benihData.push({ jenis: rows[i][0].trim(), jumlah: parseInt(rows[i][1].trim()) || 0 });
                    }
                }
                
                // Parse Distribusi Benih (rows 13-16 in JS array, spreadsheet rows 14-17)
                for (let i = 13; i <= 16; i++) {
                    if (rows[i] && rows[i][0] && rows[i][1]) {
                        distribusiData.push({ bulan: rows[i][0].trim(), jumlah: parseFloat(rows[i][1].trim()) || 0 });
                    }
                }
                
                updateDashboard();
                document.getElementById('fetch-error').style.display = 'none';
            } catch (error) {
                console.error('Error fetching data:', error);
                document.getElementById('fetch-error').style.display = 'block';
            }
        }

